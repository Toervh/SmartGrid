<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text></help_text><element><id>UMLClass</id><coordinates><x>280</x><y>10</y><w>210</w><h>220</h></coordinates><panel_attributes>Class: House
--
Properties:
ID: Int
x_coordinate: int
y_coordinate: int
Connected to: none (int)
Output: float
connected_battery: (object)
Cables: [ ]
--
methods:
add_cables: #TODO
kortste_weg: #TODO
add_connected_battery: adds a battery object to connected_battery

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>140</y><w>210</w><h>260</h></coordinates><panel_attributes>Class: Battery
--
Properties:
id: Int
x_coordinate: int
y_coordinate: int
capacity: float
current_capacity: float
houses: [list of house ID's]
houses_objects: [list of house Objects]

--
methods:
add_houses
add_house_objects
return_x
return_y
update_capacity #TODO




</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>200</x><y>50</y><w>100</w><h>160</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;140;80;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>280</x><y>240</y><w>210</w><h>200</h></coordinates><panel_attributes>Class District:
--
Properties:
id: Int
houses: [list of house objects]
batteries: [list of battery objects]
costs_shared: None #TODO


--
methods:
print_district: prints all houses and batteries within district to terminal.
dict_me: turns all houses and batteries into a logical dictionary and outputs that information to a JSON file.
out_json
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>200</x><y>250</y><w>100</w><h>80</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>80;60;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>630</x><y>10</y><w>210</w><h>190</h></coordinates><panel_attributes>Class: Cable
vars: start x/y, end x/y, district, house, battery
--
Properties:

x coordinates (list)
y coordinates (list)
xy coordinates (length)  (list)
--
methods:
add cables</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>620</x><y>310</y><w>390</w><h>120</h></coordinates><panel_attributes>&lt;&lt;Algorithm: closest&gt;&gt;
Object: District
it's input is and will connect houses as an object in the district superclass.
method: closest(district.house, district.batteries)
will connect batteries to available batteries based on distance

method: cable(): adds cables to plot bokeh graph
--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>710</x><y>190</y><w>240</w><h>140</h></coordinates><panel_attributes>lt=&lt;.&gt;
&lt;&lt;closest creates cable objects&gt;&gt;</panel_attributes><additional_attributes>10;10;90;120</additional_attributes></element><element><id>Relation</id><coordinates><x>470</x><y>310</y><w>180</w><h>140</h></coordinates><panel_attributes>lt=&lt;.&gt;
&lt;&lt;creates instances of districts&gt;&gt;</panel_attributes><additional_attributes>20;10;150;120</additional_attributes></element></diagram>